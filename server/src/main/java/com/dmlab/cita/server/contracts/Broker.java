package com.dmlab.cita.server.contracts;

import com.citahub.cita.abi.EventEncoder;
import com.citahub.cita.abi.EventValues;
import com.citahub.cita.abi.TypeReference;
import com.citahub.cita.abi.datatypes.Address;
import com.citahub.cita.abi.datatypes.Bool;
import com.citahub.cita.abi.datatypes.DynamicArray;
import com.citahub.cita.abi.datatypes.Event;
import com.citahub.cita.abi.datatypes.Type;
import com.citahub.cita.abi.datatypes.Utf8String;
import com.citahub.cita.abi.datatypes.generated.Uint256;
import com.citahub.cita.abi.datatypes.generated.Uint64;
import com.citahub.cita.protocol.CITAj;
import com.citahub.cita.protocol.core.DefaultBlockParameter;
import com.citahub.cita.protocol.core.RemoteCall;
import com.citahub.cita.protocol.core.methods.request.AppFilter;
import com.citahub.cita.protocol.core.methods.response.Log;
import com.citahub.cita.protocol.core.methods.response.TransactionReceipt;
import com.citahub.cita.tuples.generated.Tuple2;
import com.citahub.cita.tx.Contract;
import com.citahub.cita.tx.TransactionManager;
import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/citahub/citaj/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with citaj version 20.2.0.
 */
public class Broker extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50612c93806100206000396000f3fe6080604052600436106100a75760003560e01c80638129fc1c116100645780638129fc1c146101c357806382e2384e146101da578063b38ff85f14610203578063b508c8d414610240578063bed34bba14610269578063c20cab50146102a6576100a7565b806329793e6e146100ac57806331942306146100e95780633b6bbe4a146101265780634420e4861461015257806367b9fa3b1461017b5780637018c8c8146101a7575b600080fd5b3480156100b857600080fd5b506100d360048036036100ce9190810190612377565b6102d2565b6040516100e09190612960565b60405180910390f35b3480156100f557600080fd5b50610110600480360361010b9190810190612377565b610329565b60405161011d9190612960565b60405180910390f35b34801561013257600080fd5b5061013b610380565b60405161014992919061286e565b60405180910390f35b34801561015e57600080fd5b5061017960048036036101749190810190612107565b610561565b005b34801561018757600080fd5b506101906105cd565b60405161019e92919061286e565b60405180910390f35b6101c160048036036101bc919081019061216c565b610790565b005b3480156101cf57600080fd5b506101d8610889565b005b3480156101e657600080fd5b5061020160048036036101fc91908101906123cb565b610aed565b005b34801561020f57600080fd5b5061022a60048036036102259190810190612130565b610aff565b60405161023791906128a5565b60405180910390f35b34801561024c57600080fd5b5061026760048036036102629190810190612288565b610c3c565b005b34801561027557600080fd5b50610290600480360361028b919081019061221c565b610eb9565b60405161029d91906128a5565b60405180910390f35b3480156102b257600080fd5b506102bb610f12565b6040516102c992919061286e565b60405180910390f35b60006102dd836110f3565b6007836040516102ed919061282b565b908152602001604051809103902060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002054905092915050565b6000610334836110f3565b600983604051610344919061282b565b908152602001604051809103902060008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002054905092915050565b60608060606005805490506040519080825280602002602001820160405280156103b95781602001602082028038833980820191505090505b50905060008090505b6005805490508167ffffffffffffffff16101561047157600a60058267ffffffffffffffff16815481106103f257fe5b906000526020600020016040516104099190612842565b908152602001604051809103902060009054906101000a900467ffffffffffffffff16828267ffffffffffffffff168151811061044257fe5b602002602001019067ffffffffffffffff16908167ffffffffffffffff168152505080806001019150506103c2565b5060058181805480602002602001604051908101604052809291908181526020016000905b82821015610552578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561053e5780601f106105135761010080835404028352916020019161053e565b820191906000526020600020905b81548152906001019060200180831161052157829003601f168201915b505050505081526020019060010190610496565b50505050915092509250509091565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555050565b60608060606004805490506040519080825280602002602001820160405280156106065781602001602082028038833980820191505090505b50905060008090505b6004805490508110156106a05760086004828154811061062b57fe5b906000526020600020016040516106429190612842565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1682828151811061067157fe5b602002602001019067ffffffffffffffff16908167ffffffffffffffff1681525050808060010191505061060f565b5060048181805480602002602001604051908101604052809291908181526020016000905b82821015610781578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b5050505050815260200190600101906106c5565b50505050915092509250509091565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460070b60070b146107eb57600080fd5b61084a87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086856040518060200160405280600081525061128c565b604051602060848237805160208160040183378151808260240184376000808285348b5af13d806000863e8160008114610885578186a08186f35b8186fd5b60008090505b6004805490508110156109055760006008600483815481106108ad57fe5b906000526020600020016040516108c49190612842565b908152602001604051809103902060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550808060010191505061088f565b5060008090505b60038054905081101561098257600060066003838154811061092a57fe5b906000526020600020016040516109419190612842565b908152602001604051809103902060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550808060010191505061090c565b5060008090505b6005805490508110156109ff576000600a600583815481106109a757fe5b906000526020600020016040516109be9190612842565b908152602001604051809103902060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508080600101915050610989565b5060008090505b600180549050811015610ac057600080600060018481548110610a2557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff1602179055508080600101915050610a06565b5060036000610acf9190611e7b565b60046000610add9190611e7b565b60056000610aeb9190611e7b565b565b610af98484848461128c565b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260070b14158015610b38575060008260070b14155b8015610b48575060018260070b14155b15610b565760009050610c36565b816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060018260070b1415610c315760018390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600190505b92915050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460070b60070b14610ccd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc4906128c0565b60405180910390fd5b6060610cd8866114af565b9050600681604051610cea919061282b565b9081526020016040518091039020600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506001600682604051610d4f919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415610dc2576003819080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610dbf929190611e9c565b50505b43600782604051610dd3919061282b565b90815260200160405180910390206000600684604051610df3919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507f85026d9efdca77567284833e9e5fa5ab0d412e8d0d9869942def88510971977c600682604051610e6d919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff16873388888888604051610ea9979695949392919061297b565b60405180910390a1505050505050565b600081604051602001610ecc919061282b565b6040516020818303038152906040528051906020012083604051602001610ef3919061282b565b6040516020818303038152906040528051906020012014905092915050565b6060806060600380549050604051908082528060200260200182016040528015610f4b5781602001602082028038833980820191505090505b50905060008090505b6003805490508167ffffffffffffffff16101561100357600660038267ffffffffffffffff1681548110610f8457fe5b90600052602060002001604051610f9b9190612842565b908152602001604051809103902060009054906101000a900467ffffffffffffffff16828267ffffffffffffffff1681518110610fd457fe5b602002602001019067ffffffffffffffff16908167ffffffffffffffff16815250508080600101915050610f54565b5060038181805480602002602001604051908101604052809291908181526020016000905b828210156110e4578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110d05780601f106110a5576101008083540402835291602001916110d0565b820191906000526020600020905b8154815290600101906020018083116110b357829003601f168201915b505050505081526020019060010190611028565b50505050915092509250509091565b6060611134826040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611809565b9050600481511461117a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117190612900565b60405180910390fd5b6111cd8160008151811061118a57fe5b60200260200101516040518060400160405280600381526020017f6469640000000000000000000000000000000000000000000000000000000000815250610eb9565b61120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390612920565b60405180910390fd5b6000600190505b600481101561128757606082828151811061122a57fe5b60200260200101519050600081511415611279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127090612940565b60405180910390fd5b508080600101915050611213565b505050565b811561139f578267ffffffffffffffff1660016008866040516112af919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff160167ffffffffffffffff16146112e757600080fd5b6112f0846119f0565b6040516020016112ff90612859565b6040516020818303038152906040528051906020012081604051602001611326919061282b565b604051602081830303815290604052805190602001201461139a5780600b85604051611352919061282b565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000209080519060200190611398929190611e9c565b505b6114a9565b8267ffffffffffffffff166001600a866040516113bc919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff160167ffffffffffffffff16146113f457600080fd5b6113fe8484611b55565b60405160200161140d90612859565b6040516020818303038152906040528051906020012081604051602001611434919061282b565b60405160208183030381529060405280519060200120146114a85780600c85604051611460919061282b565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002090805190602001906114a6929190611e9c565b505b5b50505050565b6060806114f1836040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611809565b90506004815114611537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152e906128e0565b60405180910390fd5b61158a8160008151811061154757fe5b60200260200101516040518060400160405280600381526020017f6469640000000000000000000000000000000000000000000000000000000000815250610eb9565b6115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c0906128e0565b60405180910390fd5b6000600190505b60048110156116445760608282815181106115e757fe5b60200260200101519050600081511415611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d90612940565b60405180910390fd5b5080806001019150506115d0565b5060606116aa6116678360008151811061165a57fe5b6020026020010151611c9d565b6116a56040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611c9d565b611ccb565b90506116da6116b882611c9d565b6116d5846001815181106116c857fe5b6020026020010151611c9d565b611ccb565b905061172b6116e882611c9d565b6117266040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611c9d565b611ccb565b905061175b61173982611c9d565b6117568460028151811061174957fe5b6020026020010151611c9d565b611ccb565b90506117ac61176982611c9d565b6117a76040518060400160405280600181526020017f3a00000000000000000000000000000000000000000000000000000000000000815250611c9d565b611ccb565b90506117fd6117ba82611c9d565b6117f86040518060400160405280600181526020017f2e00000000000000000000000000000000000000000000000000000000000000815250611c9d565b611ccb565b90508092505050919050565b60608083905060008090506000600190505b6001835103821015611878576000611834878785611d4d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156118645750611878565b81806001019250506001810192505061181b565b806040519080825280602002602001820160405280156118ac57816020015b60608152602001906001900390816118975790505b50935060009150600090505b600183510382116119e45760006118d0878785611d4d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156118ff57835190505b60608382036040519080825280601f01601f1916602001820160405280156119365781602001600182028038833980820191505090505b5090506060819050600080905060008690505b848110156119b65787818151811061195d57fe5b602001015160f81c60f81b83838060010194508151811061197a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611949565b50600184019550818886806001019750815181106119d057fe5b6020026020010181905250505050506118b8565b83935050505092915050565b600881604051611a00919061282b565b9081526020016040518091039020600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506001600882604051611a65919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415611ad8576004819080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611ad5929190611e9c565b50505b43600982604051611ae9919061282b565b90815260200160405180910390206000600884604051611b09919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208190555050565b6000600a83604051611b67919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff161415611bda576005829080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611bd7929190611e9c565b50505b80600a83604051611beb919061282b565b908152602001604051809103902060006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555043600983604051611c30919061282b565b90815260200160405180910390206000600a85604051611c50919061282b565b908152602001604051809103902060009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055505050565b611ca5611f1c565b600060208301905060405180604001604052808451815260200182815250915050919050565b60608082600001518460000151016040519080825280601f01601f191660200182016040528015611d0b5781602001600182028038833980820191505090505b5090506000602082019050611d298186602001518760000151611e32565b611d428560000151820185602001518660000151611e32565b819250505092915050565b6000606084905060608490506001815114611d6457fe5b60008490505b8251811015611e045781600081518110611d8057fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916838281518110611db957fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415611df757809350505050611e2b565b8080600101915050611d6a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff925050505b9392505050565b5b60208110611e565781518352602083019250602082019150602081039050611e33565b60006001826020036101000a0390508019835116818551168181178652505050505050565b5080546000825590600052602060002090810190611e999190611f36565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611edd57805160ff1916838001178555611f0b565b82800160010185558215611f0b579182015b82811115611f0a578251825591602001919060010190611eef565b5b509050611f189190611f62565b5090565b604051806040016040528060008152602001600081525090565b611f5f91905b80821115611f5b5760008181611f529190611f87565b50600101611f3c565b5090565b90565b611f8491905b80821115611f80576000816000905550600101611f68565b5090565b90565b50805460018160011615610100020316600290046000825580601f10611fad5750611fcc565b601f016020900490600052602060002090810190611fcb9190611f62565b5b50565b6000611fdb8235612b71565b905092915050565b6000611fef8235612b83565b905092915050565b60008083601f84011261200957600080fd5b8235905067ffffffffffffffff81111561202257600080fd5b60208301915083600182028301111561203a57600080fd5b9250929050565b600061204d8235612b8f565b905092915050565b60008083601f84011261206757600080fd5b8235905067ffffffffffffffff81111561208057600080fd5b60208301915083600182028301111561209857600080fd5b9250929050565b600082601f8301126120b057600080fd5b81356120c36120be82612a3a565b612a0d565b915080825260208301602083018583830111156120df57600080fd5b6120ea838284612c06565b50505092915050565b60006120ff8235612bbc565b905092915050565b60006020828403121561211957600080fd5b600061212784828501611fcf565b91505092915050565b6000806040838503121561214357600080fd5b600061215185828601611fcf565b925050602061216285828601612041565b9150509250929050565b600080600080600080600060a0888a03121561218757600080fd5b600088013567ffffffffffffffff8111156121a157600080fd5b6121ad8a828b01612055565b975097505060206121c08a828b016120f3565b95505060406121d18a828b01611fcf565b94505060606121e28a828b01611fe3565b935050608088013567ffffffffffffffff8111156121ff57600080fd5b61220b8a828b01611ff7565b925092505092959891949750929550565b6000806040838503121561222f57600080fd5b600083013567ffffffffffffffff81111561224957600080fd5b6122558582860161209f565b925050602083013567ffffffffffffffff81111561227257600080fd5b61227e8582860161209f565b9150509250929050565b600080600080600060a086880312156122a057600080fd5b600086013567ffffffffffffffff8111156122ba57600080fd5b6122c68882890161209f565b955050602086013567ffffffffffffffff8111156122e357600080fd5b6122ef8882890161209f565b945050604086013567ffffffffffffffff81111561230c57600080fd5b6123188882890161209f565b935050606086013567ffffffffffffffff81111561233557600080fd5b6123418882890161209f565b925050608086013567ffffffffffffffff81111561235e57600080fd5b61236a8882890161209f565b9150509295509295909350565b6000806040838503121561238a57600080fd5b600083013567ffffffffffffffff8111156123a457600080fd5b6123b08582860161209f565b92505060206123c1858286016120f3565b9150509250929050565b600080600080608085870312156123e157600080fd5b600085013567ffffffffffffffff8111156123fb57600080fd5b6124078782880161209f565b9450506020612418878288016120f3565b935050604061242987828801611fe3565b925050606085013567ffffffffffffffff81111561244657600080fd5b6124528782880161209f565b91505092959194509250565b600061246a83836125dd565b905092915050565b600061247e838361280d565b60208301905092915050565b61249381612bd0565b82525050565b60006124a482612a92565b6124ae8185612ad8565b9350836020820285016124c085612a66565b60005b848110156124f95783830388526124db83835161245e565b92506124e682612abe565b91506020880197506001810190506124c3565b508196508694505050505092915050565b600061251582612a9d565b61251f8185612ae9565b935061252a83612a73565b60005b8281101561255857612540868351612472565b955061254b82612acb565b915060018101905061252d565b50849250505092915050565b61256d81612b27565b82525050565b600061257e82612ab3565b6125888185612b0b565b9350612598818560208601612c15565b6125a181612c48565b840191505092915050565b60006125b782612ab3565b6125c18185612b1c565b93506125d1818560208601612c15565b80840191505092915050565b60006125e882612aa8565b6125f28185612afa565b9350612602818560208601612c15565b61260b81612c48565b840191505092915050565b60008154600181166000811461263357600181146126585761269c565b607f60028304166126448187612b1c565b955060ff198316865280860193505061269c565b600282046126668187612b1c565b955061267185612a80565b60005b8281101561269357815481890152600182019150602081019050612674565b82880195505050505b505092915050565b60006126b1601d83612b0b565b91507f496e766f6b657220617265206e6f7420696e207768697465206c6973740000006000830152602082019050919050565b60006126f1601783612b0b565b91507f646964206973206e6f74206c6567616c20666f726d61740000000000000000006000830152602082019050919050565b6000612731601783612b0b565b91507f646964206973206e6f7420696e20666f757220706172740000000000000000006000830152602082019050919050565b6000612771601183612b0b565b91507f707265666978206973206e6f74206469640000000000000000000000000000006000830152602082019050919050565b60006127b1601383612b0b565b91507f6469642073756273657420697320656d707479000000000000000000000000006000830152602082019050919050565b60006127f1600083612b1c565b9150600082019050919050565b61280781612b53565b82525050565b61281681612b5d565b82525050565b61282581612b5d565b82525050565b600061283782846125ac565b915081905092915050565b600061284e8284612616565b915081905092915050565b6000612864826127e4565b9150819050919050565b600060408201905081810360008301526128888185612499565b9050818103602083015261289c818461250a565b90509392505050565b60006020820190506128ba6000830184612564565b92915050565b600060208201905081810360008301526128d9816126a4565b9050919050565b600060208201905081810360008301526128f9816126e4565b9050919050565b6000602082019050818103600083015261291981612724565b9050919050565b6000602082019050818103600083015261293981612764565b9050919050565b60006020820190508181036000830152612959816127a4565b9050919050565b600060208201905061297560008301846127fe565b92915050565b600060e082019050612990600083018a61281c565b81810360208301526129a28189612573565b90506129b1604083018861248a565b81810360608301526129c38187612573565b905081810360808301526129d78186612573565b905081810360a08301526129eb8185612573565b905081810360c08301526129ff8184612573565b905098975050505050505050565b6000604051905081810181811067ffffffffffffffff82111715612a3057600080fd5b8060405250919050565b600067ffffffffffffffff821115612a5157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000612b7c82612b9c565b9050919050565b60008115159050919050565b60008160070b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000612bdb82612be2565b9050919050565b6000612bed82612bf4565b9050919050565b6000612bff82612b33565b9050919050565b82818337600083830152505050565b60005b83811015612c33578082015181840152602081019050612c18565b83811115612c42576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058202d80cf02e6ca889241e3336065aab8636347319a4b6fe532ad28d138ccf49ddc6c6578706572696d656e74616cf50037";

    private static final String ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"string\",\"indexed\":false},{\"name\":\"idx\",\"type\":\"uint64\",\"indexed\":false}],\"name\":\"getOutMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"string\",\"indexed\":false},{\"name\":\"idx\",\"type\":\"uint64\",\"indexed\":false}],\"name\":\"getInMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCallbackMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"indexed\":false},{\"name\":\"\",\"type\":\"uint64[]\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\",\"indexed\":false}],\"name\":\"register\",\"outputs\":[],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInnerMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"indexed\":false},{\"name\":\"\",\"type\":\"uint64[]\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcChainMethod\",\"type\":\"string\",\"indexed\":false},{\"name\":\"index\",\"type\":\"uint64\",\"indexed\":false},{\"name\":\"destAddr\",\"type\":\"address\",\"indexed\":false},{\"name\":\"req\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"bizCallData\",\"type\":\"bytes\",\"indexed\":false}],\"name\":\"invokeInterchain\",\"outputs\":[],\"type\":\"function\",\"payable\":true,\"stateMutability\":\"payable\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"srcChainMethod\",\"type\":\"string\",\"indexed\":false},{\"name\":\"index\",\"type\":\"uint64\",\"indexed\":false},{\"name\":\"req\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"err\",\"type\":\"string\",\"indexed\":false}],\"name\":\"invokeIndexUpdateWithError\",\"outputs\":[],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\",\"indexed\":false},{\"name\":\"status\",\"type\":\"int64\",\"indexed\":false}],\"name\":\"audit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"constant\":false,\"inputs\":[{\"name\":\"destContractDID\",\"type\":\"string\",\"indexed\":false},{\"name\":\"funcs\",\"type\":\"string\",\"indexed\":false},{\"name\":\"args\",\"type\":\"string\",\"indexed\":false},{\"name\":\"argscb\",\"type\":\"string\",\"indexed\":false},{\"name\":\"argsrb\",\"type\":\"string\",\"indexed\":false}],\"name\":\"emitInterchainEvent\",\"outputs\":[],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"nonpayable\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"string\",\"indexed\":false},{\"name\":\"b\",\"type\":\"string\",\"indexed\":false}],\"name\":\"compareStrings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOuterMeta\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\",\"indexed\":false},{\"name\":\"\",\"type\":\"uint64[]\",\"indexed\":false}],\"type\":\"function\",\"payable\":false,\"stateMutability\":\"view\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\",\"indexed\":false},{\"name\":\"destDID\",\"type\":\"string\",\"indexed\":false},{\"name\":\"fid\",\"type\":\"address\",\"indexed\":false},{\"name\":\"funcs\",\"type\":\"string\",\"indexed\":false},{\"name\":\"args\",\"type\":\"string\",\"indexed\":false},{\"name\":\"argscb\",\"type\":\"string\",\"indexed\":false},{\"name\":\"argsrb\",\"type\":\"string\",\"indexed\":false}],\"name\":\"throwEvent\",\"outputs\":null,\"type\":\"event\",\"payable\":false,\"stateMutability\":null},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\",\"indexed\":false},{\"name\":\"data\",\"type\":\"string\",\"indexed\":false}],\"name\":\"LogInterchainData\",\"outputs\":null,\"type\":\"event\",\"payable\":false,\"stateMutability\":null},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\",\"indexed\":false}],\"name\":\"LogInterchainStatus\",\"outputs\":null,\"type\":\"event\",\"payable\":false,\"stateMutability\":null}]";

    protected Broker(String contractAddress, CITAj citaj, TransactionManager transactionManager) {
        super(BINARY, contractAddress, citaj, transactionManager);
    }

    public List<ThrowEventEventResponse> getThrowEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("throwEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ThrowEventEventResponse> responses = new ArrayList<ThrowEventEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ThrowEventEventResponse typedResponse = new ThrowEventEventResponse();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.destDID = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fid = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.funcs = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.args = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.argscb = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.argsrb = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ThrowEventEventResponse> throwEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("throwEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        AppFilter filter = new AppFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return citaj.appLogFlowable(filter).map(new Function<Log, ThrowEventEventResponse>() {
            @Override
            public ThrowEventEventResponse apply(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ThrowEventEventResponse typedResponse = new ThrowEventEventResponse();
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.destDID = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.fid = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.funcs = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.args = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.argscb = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.argsrb = (String) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogInterchainDataEventResponse> getLogInterchainDataEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogInterchainData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogInterchainDataEventResponse> responses = new ArrayList<LogInterchainDataEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogInterchainDataEventResponse typedResponse = new LogInterchainDataEventResponse();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.data = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogInterchainDataEventResponse> logInterchainDataEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogInterchainData", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        AppFilter filter = new AppFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return citaj.appLogFlowable(filter).map(new Function<Log, LogInterchainDataEventResponse>() {
            @Override
            public LogInterchainDataEventResponse apply(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogInterchainDataEventResponse typedResponse = new LogInterchainDataEventResponse();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.data = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogInterchainStatusEventResponse> getLogInterchainStatusEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogInterchainStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogInterchainStatusEventResponse> responses = new ArrayList<LogInterchainStatusEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogInterchainStatusEventResponse typedResponse = new LogInterchainStatusEventResponse();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogInterchainStatusEventResponse> logInterchainStatusEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogInterchainStatus", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        AppFilter filter = new AppFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return citaj.appLogFlowable(filter).map(new Function<Log, LogInterchainStatusEventResponse>() {
            @Override
            public LogInterchainStatusEventResponse apply(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogInterchainStatusEventResponse typedResponse = new LogInterchainStatusEventResponse();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> getOutMessage(String to, BigInteger idx) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("getOutMessage", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(to), 
                new com.citahub.cita.abi.datatypes.generated.Uint64(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getInMessage(String from, BigInteger idx) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("getInMessage", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(from), 
                new com.citahub.cita.abi.datatypes.generated.Uint64(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> getCallbackMeta() {
        final com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("getCallbackMeta", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Uint64>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> register(String addr, Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "register", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> getInnerMeta() {
        final com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("getInnerMeta", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Uint64>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> invokeInterchain(String srcChainMethod, BigInteger index, String destAddr, Boolean req, byte[] bizCallData, BigInteger weiValue, Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "invokeInterchain", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(srcChainMethod), 
                new com.citahub.cita.abi.datatypes.generated.Uint64(index), 
                new com.citahub.cita.abi.datatypes.Address(destAddr), 
                new com.citahub.cita.abi.datatypes.Bool(req), 
                new com.citahub.cita.abi.datatypes.DynamicBytes(bizCallData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<TransactionReceipt> initialize(Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "initialize", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<TransactionReceipt> invokeIndexUpdateWithError(String srcChainMethod, BigInteger index, Boolean req, String err, Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "invokeIndexUpdateWithError", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(srcChainMethod), 
                new com.citahub.cita.abi.datatypes.generated.Uint64(index), 
                new com.citahub.cita.abi.datatypes.Bool(req), 
                new com.citahub.cita.abi.datatypes.Utf8String(err)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<TransactionReceipt> audit(String addr, BigInteger status, Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "audit", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Address(addr), 
                new com.citahub.cita.abi.datatypes.generated.Int64(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<TransactionReceipt> emitInterchainEvent(String destContractDID, String funcs, String args, String argscb, String argsrb, Long quota, String nonce, Long validUntilBlock, Integer version, BigInteger chainId, String value) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function(
                "emitInterchainEvent", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(destContractDID), 
                new com.citahub.cita.abi.datatypes.Utf8String(funcs), 
                new com.citahub.cita.abi.datatypes.Utf8String(args), 
                new com.citahub.cita.abi.datatypes.Utf8String(argscb), 
                new com.citahub.cita.abi.datatypes.Utf8String(argsrb)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, version, chainId, value);
    }

    public RemoteCall<Boolean> compareStrings(String a, String b) {
        com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("compareStrings", 
                Arrays.<Type>asList(new com.citahub.cita.abi.datatypes.Utf8String(a), 
                new com.citahub.cita.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple2<List<String>, List<BigInteger>>> getOuterMeta() {
        final com.citahub.cita.abi.datatypes.Function function = new com.citahub.cita.abi.datatypes.Function("getOuterMeta", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint64>>() {}));
        return new RemoteCall<Tuple2<List<String>, List<BigInteger>>>(
                new Callable<Tuple2<List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<String>, List<BigInteger>>(
                                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                                convertToNative((List<Uint64>) results.get(1).getValue()));
                    }
                });
    }

    public static RemoteCall<Broker> deploy(CITAj citaj, TransactionManager transactionManager, Long quota, String nonce, Long validUntilBlock, Integer version, String value, BigInteger chainId) {
        return deployRemoteCall(Broker.class, citaj, transactionManager, quota, nonce, validUntilBlock, version, chainId, value, BINARY, "");
    }

    public static Broker load(String contractAddress, CITAj citaj, TransactionManager transactionManager) {
        return new Broker(contractAddress, citaj, transactionManager);
    }

    public static class ThrowEventEventResponse {
        public BigInteger index;

        public String destDID;

        public String fid;

        public String funcs;

        public String args;

        public String argscb;

        public String argsrb;
    }

    public static class LogInterchainDataEventResponse {
        public Boolean status;

        public String data;
    }

    public static class LogInterchainStatusEventResponse {
        public Boolean status;
    }
}
